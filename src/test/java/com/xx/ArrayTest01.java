package com.xx;

import org.springframework.core.env.SystemEnvironmentPropertySource;

/*
 *  Array
 *       1.java语言中的数组一种引用数据类型，不属于基本数据类型。数组的父类是Object
 *       2.数组实际是一个容器，可以容那多个元素
 *       3.数组中可以存储“基本数据类型”的数据，也可以存储“引用数据类型的数据”
 *       4.数组因为是引用类型，所以数据类型是堆内存中的
 *       5.数组当中如果存的是”java对象“的话，实际上存储的对象是”引用（内存地址）“
 *       6.数组一旦创建，在java中长度不变
 *       7.数组的分类：一维数组、二维数组、三维数组、多维数组。。。。（一维数组较多，二维数组偶尔使用）、
 *       8.所有的数组对象都有length属性，用来获取数组中元素的个数
 *       9.java中的数组要求数组中元素的类型统一，比如int类型数组存储int类型，person类型数组只能存储person类型
 *       10.数组在内存方面存储的时候，数组中的元素都是有规则的挨着排序是连续的。内存连续这是数组存储元素的特点。数组实际上是一种简单的数据结构
 *       11.所有的数组都是拿”第一个小方框的内存地址“作为整个数组对象的内存地址。
 *       12.数组中每一个元素都有下标的，下标从E开始，以1递增。最后一个元素下标 length -1
 *          下标非常重要， 因为我们对数组中元素进行”存取“的时候，都需要通过对下标进行
 *       13.数组这种数据结构的优点和缺点是什么》
 *          优点：查询/查找/检索某个下标上的元素时效率最高。查询效率最高的数据结构
 *                 为什么检索效率高？
 *                  第一：每一个元素的内存地址在空间存储上是连续的
 *                  第二：每一个元素类型相同，所以占用空间大小一致
 *                  第三：知道第一个元素内存地址，知道每一个元素占用空间大小，又知道下标，所以通过内存地址定位元素，所以数组的检索效率最高
 *          缺点：由于为了保证数组中每一个元素的内存地址连续，所以在数组上随机删除或者增加元素的时候，效率低，因为随即增删元素会涉及到后面元素
 *                 统一向前或者向后位移的操作
 *                  第二：数组不能存储大数据量？为什么？
 *                  因为很难在内存空间上找到一块特别大的连续的内存空间
 *              注意：对于数组中最后一个元素的增删，是没有特别大的连续的内存空间
 *         语法格式：
 *              int[] array1;
 *              double[] array2;
 *              boolean[] array3;
 *              String[] array4;
 *              Object[] array5;
 *        怎么初始化一个一维数组?
 *          两种方法：静态/动态初始化方式
 *              静态：
 *              int[] array = {1,100.10,20,55,660};
 *              动态：
 *              int[] array = new int[5];
 *              String names = new String[6];
 */

public class ArrayTest01 {
    public static void main(String[] args) {
        //声明一个静态初始化数组，使用静态初始化的方式：
        int[] a1 = {1,100,10,20,55,660};
        //所有的数组对象都有length属性
        System.out.println("数组中的元素个数"+ a1.length);
        System.out.println("第一个元素"+ a1[0]);
        System.out.println("最后一个元素"+ a1[5]);
        //存（修改）
        //把第一个元素改为111
        a1[0] = 111;
        a1[a1.length-1] = 0;
        System.out.println("第一个元素"+ a1[0]);
        System.out.println("最后一个元素"+ a1[5]);

        //一维数组怎么遍历呢？
        for (int i=0;i<a1.length; i++){
            System.out.println(a1[i]);//i是从0到5 是下标
        }

        //下标为6表示第七个元素；下标越界会出现什么异常呢?
        //System.out.println(a1[6]);//ArrayIndexOutOfBoundsException: 数组下标越界异常

        //从最后一个元素遍历到第一个元素
        for (int i = a1.length -1 ; i >=0; i--){
            System.out.println("颠倒顺序输出-->"+a1[i]);
        }

        //动态初始化:
    }

}
